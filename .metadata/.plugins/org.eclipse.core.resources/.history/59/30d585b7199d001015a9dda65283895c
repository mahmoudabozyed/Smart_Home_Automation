#include "MCAL/ADC/ADC.h"
#include "HAL/LCD/LCD.h"
#include "MCAL/PWM/PWM.h"
#include "HAL/DCMotor/DCMotor.h"
#include "HAL/LDR/LDR.h"
#include "HAL/LM35/LM35.h"
#include "HAL/Flame_sensor/Flame.h"
#include "HAL/LED/LED.h"
#include "HAL/BUZZER/Buzzer.h"
#include "MCAL/GPIO/common_macros.h"
#include "MCAL/GPIO/std_type.h"

#include <avr/io.h>
#include <util/delay.h>

int main(void) {
    uint16 light_intensity;
    uint8 temperature;
    uint8 flame_detected;

    // Initialize all drivers
    ADC_init();
    FlameSensor_init();
    LCD_init();
    DcMotor_Init();
    Buzzer_init();
    LEDS_init();

    // Display static headers on LCD
    LCD_displayStringRowColumn(0, 3, "FAN is ");
    LCD_displayStringRowColumn(1, 0, "Temp= ");
    LCD_displayStringRowColumn(1, 9, "LDR= ");

    while (1) {
        // Read sensor values
        light_intensity = LDR_getLightIntensity();
        temperature = LM35_getTemperature();
        flame_detected = FlameSensor_getValue();

        /* ================= Fire Detection (Highest Priority) ================= */
        if (flame_detected == HIGH) {
            Buzzer_on();
            LCD_clearScreen();
            LCD_displayStringRowColumn(0, 3, "CRITICAL ALERT!");
            LCD_displayStringRowColumn(1, 1, "FIRE DETECTED!");
            _delay_ms(1000);
            continue;  // Skip other operations during fire
        } else {
            Buzzer_off();

            // Restore normal display if not in alert mode
            LCD_clearScreen();
            LCD_displayStringRowColumn(0, 3, "FAN is ");
            LCD_displayStringRowColumn(1, 0, "Temp= ");
            LCD_displayStringRowColumn(1, 9, "LDR= ");
        }

        /* ================= Update Temperature Display ================= */
        LCD_moveCursur(1, 6);
        if (temperature < 100) {
            LCD_displayString(" ");  // Clear extra digit
        }
        LCD_moveCursur(1, 6);
        LCD_itos(temperature);
        LCD_displayString("C");

        /* ================= Update Light Intensity Display ================= */
        LCD_moveCursur(1, 14);
        if (light_intensity < 100) {
            LCD_displayString(" ");  // Clear extra digit
        }
        LCD_moveCursur(1, 14);
        LCD_itos(light_intensity);
        LCD_displayString("%");

        /* ================= Fan Control ================= */
        LCD_moveCursur(0, 10);
        if (temperature >= 40) {
            DcMotor_Rotate(CW, 100);
            LCD_displayString("ON ");
        } else if (temperature >= 35) {
            DcMotor_Rotate(CW, 75);
            LCD_displayString("ON ");
        } else if (temperature >= 30) {
            DcMotor_Rotate(CW, 50);
            LCD_displayString("ON ");
        } else if (temperature >= 25) {
            DcMotor_Rotate(CW, 25);
            LCD_displayString("ON ");
        } else {
            DcMotor_Rotate(Stop, 0);
            LCD_displayString("OFF");
        }

        /* ================= LED Control ================= */
        if (light_intensity < 15) {
            // Very dark - All LEDs ON
            LED_on(RED_LED);
            LED_on(GREEN_LED);
            LED_on(BLUE_LED);
        } else if (light_intensity <= 50) {
            // Dim light - Red + Green ON
            LED_on(RED_LED);
            LED_on(GREEN_LED);
            LED_off(BLUE_LED);
        } else if (light_intensity <= 70) {
            // Medium light - Only Red ON
            LED_on(RED_LED);
            LED_off(GREEN_LED);
            LED_off(BLUE_LED);
        } else {
            // Bright light - All LEDs OFF
            LED_off(RED_LED);
            LED_off(GREEN_LED);
            LED_off(BLUE_LED);
        }

        _delay_ms(500);  // Update every 500ms
    }
}
