/******************************************************************************
 *
 * Module: GPIO
 *
 * File Name: gpio.c
 *
 * Description: Header file for the AVR GPIO driver
 *
 * Author: Mahmoud Abouzeid
 *
 *******************************************************************************/
#include "common_macros.h"
#include "GPIO.h"
#include <avr/io.h>

void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,pinDirection status){
	if((port_num > NUM_OF_PORTS)|| (pin_num > NUM_OF_PIN_PER_PORT)){

	}else{
		switch(port_num){
		case PORTA_ID:
			if(status == pin_output){
				SET_BIT(DDRA, pin_num);
			}else{
				CLEAR_BIT(DDRA, pin_num);
			}
			break;
		case PORTB_ID:
			if(status == pin_output){
				SET_BIT(DDRB, pin_num);
			}else{
				CLEAR_BIT(DDRB, pin_num);
			}
			break;
		case PORTC_ID:
			if(status == pin_output){
				SET_BIT(DDRC, pin_num);
			}else{
				CLEAR_BIT(DDRC, pin_num);
			}
			break;
		case PORTD_ID:
			if(status == pin_output){
				SET_BIT(DDRD, pin_num);
			}else{
				CLEAR_BIT(DDRD, pin_num);
			}
			break;
		}
	}
}


void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value){
	if((port_num > NUM_OF_PORTS)|| (pin_num > NUM_OF_PIN_PER_PORT)){

	}else{
		switch(port_num){
		case PORTA_ID:
			if(value == HIGH){
				SET_BIT(PORTA, pin_num);
			}else{
				CLEAR_BIT(PORTA, pin_num);
			}
			break;
		case PORTB_ID:
			if(value == HIGH){
				SET_BIT(PORTB, pin_num);
			}else{
				CLEAR_BIT(PORTB, pin_num);
			}
			break;
		case PORTC_ID:
			if(value == HIGH){
				SET_BIT(PORTC, pin_num);
			}else{
				CLEAR_BIT(PORTC, pin_num);
			}
			break;
		case PORTD_ID:
			if(value == HIGH){
				SET_BIT(PORTD, pin_num);
			}else{
				CLEAR_BIT(PORTD, pin_num);
			}
			break;
		}
	}
}


uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
	uint8 status = LOW;
	if((port_num > NUM_OF_PORTS)|| (pin_num > NUM_OF_PIN_PER_PORT)){

	}else{
		switch(port_num){
		case PORTA_ID:
			if(BIT_IS_SET(PINA, pin_num)){
				status = HIGH;
			}else{
				status = LOW;
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB, pin_num)){
				status = HIGH;
			}else{
				status = LOW;
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC, pin_num)){
				status = HIGH;
			}else{
				status = LOW;
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND, pin_num)){
				status = HIGH;
			}else{
				status = LOW;
			}
			break;
		}
	}
	return status;
}

void GPIO_setupPortDirection(uint8 port_num, portDirection status){
	if(port_num > NUM_OF_PORTS){

	}else{
		switch(port_num){
		case PORTA_ID:
			DDRA = status;
			break;
		case PORTB_ID:
			DDRB = status;
			break;

		case PORTC_ID:
			DDRC = status;
			break;

		case PORTD_ID:
			DDRD = status;
			break;
		}
	}
}

void GPIO_writePort(uint8 port_num, uint8 value){
	if(port_num > NUM_OF_PORTS){

	}else{
		switch(port_num){
		case PORTA_ID:
			PORTA = value;
			break;
		case PORTB_ID:
			PORTB = value;
			break;
		case PORTC_ID:
			PORTC = value;
			break;
		case PORTD_ID:
			PORTD = value;
			break;
		}
	}
}

uint8 GPIO_readPort(uint8 port_num){
	uint8 status = 0x00;
	if(port_num > NUM_OF_PORTS){

	}else{
		switch(port_num){
		case PORTA_ID:
			status = PINA;
			break;
		case PORTB_ID:
			status = PINB;
			break;
		case PORTC_ID:
			status = PINC;
			break;
		case PORTD_ID:
			status = PIND;
			break;
		}
	}
	return status;
}
